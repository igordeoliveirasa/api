#!/usr/bin/env node

/**
 * Created by igor on 10/05/15.
 */

var Parse = require('parse').Parse;
Parse.initialize("WE1ExJbmUS4zRcKOYopvSyECi9gFJ1C1N5GFTD7l", "vprhe4lWqNvfkgurX8J6zV6sijyfo2c2jRfwv0t4");

var MESSAGE_HIT = "Done! Codemets hits Earth!";

var Codemets = {

    BUILD_STATUS: {
        SUCCESS: "SUCCESS",
        ERROR: "ERROR"
    },

    Model: {
        Auth: {
            where : function(key, value) {
                var query = new Parse.Query(Parse.User);
                query.equalTo(key, value);
                return query.find();
            }
        },
        Project:{
            save: function (user, identifier, name) {
                var Entity = Parse.Object.extend("Project");
                var entity = new Entity();
                entity.set("identifier", identifier);
                entity.set("name", name);
                entity.set("user", user);

                var acl = new Parse.ACL(user);
                acl.setPublicReadAccess(true);
                entity.setACL(acl);

                return entity.save();
            },
            where: function(key, value) {
                var Entity = Parse.Object.extend("Project");
                var query = new Parse.Query(Entity);
                query.equalTo(key, value);
                return query.find();
            }
        },
        Hit:{
            save:function(user, project, buildStatus, coverageRate){
                var Entity = Parse.Object.extend("Hit");
                var entity = new Entity();
                entity.set("project", project);
                entity.set("buildStatus", buildStatus);
                entity.set("coverageRate", coverageRate);
                entity.set("user", user);
                var acl = new Parse.ACL(user);
                acl.setPublicReadAccess(true);
                entity.setACL(acl);
                return entity.save();
            }
        }
    },
    Push: {
        send:function(channels, alert){
            Parse.Push.send(
                {
                    channels: channels,
                    data: {alert: alert}
                },
                {
                    success: Codemets.Push.sendSuccessCallback,
                    error: Codemets.Push.sendErrorCallback
                }
            );
        },
        sendSuccessCallback:function(){
        },
        sendErrorCallback:function(error){
            console.log(error);
        }
    },
    hit: function(accountToken, projectIdentifier, projectName, buildStatus, coverageRate) {
        Codemets.Model.Auth.where("accountToken", accountToken).then(function(users){
            if (users.length>0) {
                var user = users[0];
                Codemets.Model.Project.where("identifier", projectIdentifier).then(function(projects){
                    if (projects.length==0) {
                        Codemets.Model.Project.save(user, projectIdentifier, projectName).then(function(project){
                            if (project) {
                                Codemets.Model.Hit.save(user, project, buildStatus, coverageRate).then(function(hit){
                                    var status = "";
                                    if (buildStatus == Codemets.BUILD_STATUS.SUCCESS) {
                                        status = "passed";
                                    }
                                    else if (buildStatus == Codemets.BUILD_STATUS.ERROR) {
                                        status = "failed";
                                    }
                                    Codemets.Push.send(["ci"], "Build " + status + ": " + projectName + ".");
                                    console.log(MESSAGE_HIT);
                                });
                            }
                        },function(error){
                            console.log(error)
                        });
                    } else {
                        var project = projects[0];
                        Codemets.Model.Hit.save(user, project, buildStatus, coverageRate).then(function(hit){
                            console.log(MESSAGE_HIT);
                        }, function(error){
                            console.log(error);
                        });
                    }
                });
            } else {
                console.log("Invalid account token.")
            }
        });
    }
};

var main = function() {
    this.displayUsage = function(){
        var title = "Codemets";
        var usage = "Usage:";
        var commandLine = "codemets <account-token> <project-id> <project-name> <build-status> <coverage-rate>";
        var br = "\n";
        var tab = "  ";
        var parametersTitle = "Parameters:";
        var accountToken = "account-token: Your account token, received when you signed up.";
        var projectId = "project-id: A unique project identifier.";
        var projectName = "project-name: The most updated project name. Changes are welcome since project-id determines the project.";
        var buildStatus = "build-status: It must be SUCCESS or ERROR, based on build results.";
        var coverageRate = "coverage-rate: The coverage rate. It must be a float number from 0.0 to 100.0.";

        var message = title + br + br +
        usage + br +
        tab + commandLine + br + br +
        parametersTitle + br +
        tab + accountToken + br +
        tab + projectId + br +
        tab + projectName + br +
        tab + buildStatus + br +
        tab + coverageRate + br;

        console.log(message);
    }

    this.run = function() {
        var argv = process.argv;
        if (argv.length<7) {
            this.displayUsage();
        }
        else {
            Codemets.hit(argv[2], argv[3], argv[4], argv[5], argv[6]);
        }
    }
};

if (require.main === module) {
    new main().run();
}